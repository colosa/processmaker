<?php
require_once PATH_TRUNK . 'gulliver/thirdparty/smarty/libs/Smarty.class.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlform.php';
require_once PATH_TRUNK . 'gulliver/system/class.xmlDocument.php';
require_once PATH_TRUNK . 'gulliver/system/class.form.php';
require_once PATH_TRUNK . 'gulliver/system/class.dbconnection.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/propel/Propel.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/creole/Creole.php';
require_once PATH_TRUNK . 'gulliver/thirdparty/pear/PEAR.php';
require_once PATH_TRUNK . 'gulliver/system/class.webResource.php';

/**
 * Generated by ProcessMaker Test Unit Generator on 2012-07-12 at 20:28:28.
*/

class classWebResourceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var WebResource
    */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
    */
    protected function setUp()
    {
        $this->object = new WebResource();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
    */
    protected function tearDown()
    {
    }

    /**
     * This is the default method to test, if the class still having 
     * the same number of methods.
    */
    public function testNumberOfMethodsInThisClass()
    {
        $this->assertTrue( count($methods) == 2);
    }

    /**
    * @covers WebResource::WebResource
    * @todo   Implement testWebResource().
    */
    public function testWebResource()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('WebResource', $methods ), 'exists method WebResource' );
        $r = new ReflectionMethod('WebResource', 'WebResource');
        $params = $r->getParameters();
        $this->assertTrue( $params[0]->getName() == 'uri');
        $this->assertTrue( $params[0]->isArray() == false);
        $this->assertTrue( $params[0]->isOptional () == false);
        $this->assertTrue( $params[1]->getName() == 'post');
        $this->assertTrue( $params[1]->isArray() == false);
        $this->assertTrue( $params[1]->isOptional () == false);
        $this->markTestIncomplete('This test has not been implemented yet.');

    } 

    /**
    * @covers WebResource::_encode
    * @todo   Implement test_encode().
    */
    public function test_encode()
    {
        $methods = get_class_methods($this->object);
        $this->assertTrue( in_array('_encode', $methods ), 'exists method _encode' );
        $r = new ReflectionMethod('WebResource', '_encode');
        $params = $r->getParameters();
        $this->markTestIncomplete('This test has not been implemented yet.');

    } 

  } 
