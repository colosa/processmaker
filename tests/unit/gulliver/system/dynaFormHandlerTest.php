<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-17 at 18:05:45.
 */
require (PATH_TRUNK . "gulliver" . PATH_SEP . "system" . PATH_SEP . "class.dynaformhandler.php");





class dynaFormHandlerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var dynaFormHandler
     */
    protected $object;
    protected $dynaFormFile;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->dynaFormFile = PATH_TRUNK . "tests" . PATH_SEP . "shared" . PATH_SEP . "dynaformhandler" . PATH_SEP . "dynaforms_Edit";
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
      $this->dynaFormFile = null;
    }

    public function nodeExists($nodeName, $xmlFile)
    {
      $reader = new XMLReader();
      $reader->open($xmlFile);
      
      $sw = 0;
      
      while ($reader->read() && $sw == 0) {
        $node = $reader->expand();
        
        if ($node->nodeName == $nodeName) {
          $sw = 1;
        }
      }
      
      $reader->close();
      
      return ($sw);
    }
    
    public function numNodes($xmlFile)
    {
      $domDoc = new DOMDocument();
      $domDoc->load($xmlFile);

      $dxp = new DOMXPath($domDoc);
      
      $node = $dxp->query("/dynaForm/*");
      
      return ($node->length);
    }
    
    public function getNode($nodeName, $xmlFile)
    {
      $reader = new XMLReader();
      $reader->open($xmlFile);
      
      $node = null;
      $sw = 0;
      
      while ($reader->read() && $sw == 0) {
        $nodeAux = $reader->expand();
        
        if ($nodeAux->nodeName == $nodeName) {
          $node = $nodeAux;
          $sw = 1;
        }
      }
      
      $reader->close();
      
      return ($node);
    }
    
    public function getPosNode($nodeName, $xmlFile)
    {
      $domDoc = new DOMDocument();
      $domDoc->load($xmlFile);

      $dxp = new DOMXPath($domDoc);
      
      $node = $dxp->query("/dynaForm/*");
      $pos = 0;
      
      for ($i = 0; $i <= $node->length - 1; $i++) {
        if ($node->item($i)->nodeName == $nodeName) {
          $pos = $i;
          break;
        }
      }
      
      return ($pos);
    }
    
    public function getRandNameNode($n, $xmlFile)
    {
      $domDoc = new DOMDocument();
      $domDoc->load($xmlFile);

      $dxp = new DOMXPath($domDoc);
      
      $node = $dxp->query("/dynaForm/*");
      $arrayNode = array();
      
      for ($i = 0; $i <= $node->length - 1; $i++) {
        $arrayNode[] = $node->item($i)->nodeName;
      }
      
      $key = array_rand($arrayNode, $n);
      
      $arrayNodeName = array();
      
      if (is_array($key)) {
        for ($i = 0; $i <= count($key) - 1; $i++) {
          $arrayNodeName[] = $arrayNode[$key[$i]];
        }
      }
      else {
        $arrayNodeName[] = $arrayNode[$key];
      }
      
      return ($arrayNodeName);
    }
    
    /**
     * @covers dynaFormHandler::load
     * @todo   Implement testLoad().
     */
    public function testLoad()
    {
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $this->assertObjectHasAttribute("root", $obj);
      
      //File with extension .html not is a xml file then throw exception
      try {
        $obj = new dynaFormHandler($this->dynaFormFile . ".html");
      }
      catch (Exception $e) {
        return;
      }
 
      $this->fail("An expected exception has not been raised (invalid xml file)");
      
      //File with extension .xxx not exist then throw exception
      try {
        $obj = new dynaFormHandler($this->dynaFormFile . ".xxx");
      }
      catch (Exception $e) {
        return;
      }
 
      $this->fail("An expected exception has not been raised (file doesn't exits)");
    }

    /**
     * @covers dynaFormHandler::reload
     * @todo   Implement testReload().
     */
    public function testReload()
    {
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $obj->reload();
      
      $this->assertObjectHasAttribute("root", $obj);
    }

    /**
     * @covers dynaFormHandler::__cloneEmpty
     * @todo   Implement test__cloneEmpty().
     */
    public function test__cloneEmpty()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->__cloneEmpty();
      
      $this->assertTrue($this->nodeExists($nodeName, $xmlTmp) == 0);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::toString
     * @todo   Implement testToString().
     */
    public function testToString()
    {
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $this->assertTrue(is_string($obj->toString()));
      $this->assertTrue(is_string($obj->toString("html")));
    }

    /**
     * @covers dynaFormHandler::getNode
     * @todo   Implement testGetNode().
     */
    public function testGetNode()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $this->assertTrue(is_object($obj->getNode($nodeName)));
    }

    /**
     * @covers dynaFormHandler::setNode
     * @todo   Implement testSetNode().
     */
    public function testSetNode()
    {
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $node = new DOMElement("NODE", "My value", "xmlnsAttributeValue");
      $newNode = $obj->setNode($node);
      
      $this->assertTrue($newNode->getAttribute("xmlns") == "xmlnsAttributeValue");
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::add
     * @todo   Implement testAdd().
     */
    public function testAdd()
    {
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->add("NODE1", array("attribute" => "value attribute"), "value node");
      
      $obj->add("NODE2", array("attribute" => "value attribute"), array("NODE2SUBNODE1" => "value node"));
      
      $subsubNode = array(
        array("name" => "NODE3SUBNODE1SUBNODE1", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute")),
        array("name" => "NODE3SUBNODE1SUBNODE2", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute"))
      );
      
      $obj->add("NODE3", array("attribute" => "value attribute"), array("NODE3SUBNODE1" => "value node"), $subsubNode);
      
      $this->assertTrue($this->nodeExists("NODE1", $xmlTmp) == 1);
      $this->assertTrue($this->nodeExists("NODE2SUBNODE1", $xmlTmp) == 1);
      $this->assertTrue($this->nodeExists("NODE3SUBNODE1SUBNODE2", $xmlTmp) == 1);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::replace
     * @todo   Implement testReplace().
     */
    public function testReplace()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $arrayAttribute = array("#text" => "text", "#cdata" => "cdata", "attribute1" => "value1", "attribute2" => "value2");
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $nodeName1 = $nodeName  . "_";
      $nodeName2 = $nodeName1 . "_";
      $nodeName3 = $nodeName2 . "_";
      $nodeName4 = $nodeName3 . "_";
      
      $obj->replace($nodeName, $nodeName1, $arrayAttribute);
      
      $node = $this->getNode($nodeName1, $xmlTmp);
      
      $this->assertTrue($this->nodeExists($nodeName1, $xmlTmp) == 1);
      $this->assertTrue(!$node->hasAttribute("type"));
      $this->assertTrue($node->hasAttribute("attribute1"));
      $this->assertTrue($node->getAttribute("attribute1") == "value1");
      
      $obj->replace($nodeName1, $nodeName2, $arrayAttribute, "value node");
      
      $this->assertTrue($this->nodeExists($nodeName2, $xmlTmp) == 1);
      
      $obj->replace($nodeName2, $nodeName3, $arrayAttribute, array("SUBNODE1" => "value node", "SUBNODE2" => array("cdata" => "value cdata")));
      
      $this->assertTrue($this->nodeExists("SUBNODE2", $xmlTmp) == 1);
      
      $subsubNode = array(
        array("name" => "SUBNODESUBNODE1", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute")),
        array("name" => "SUBNODESUBNODE2", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute"))
      );
      
      $obj->replace($nodeName3, $nodeName4, $arrayAttribute, array("SUBNODE1" => "value node", "SUBNODE2" => array("cdata" => "value cdata")), $subsubNode);
      
      $this->assertTrue($this->nodeExists("SUBNODESUBNODE2", $xmlTmp) == 1);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::save
     * @todo   Implement testSave().
     */
    public function testSave()
    {
      $xmlTmp  = $this->dynaFormFile . "Tmp.xml";
      $xmlTmp2 = $this->dynaFormFile . "Tmp2.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->save($xmlTmp2);
      
      $this->assertTrue(file_exists($xmlTmp2));
      
      $obj->save();
      
      $this->assertTrue(file_exists($xmlTmp2));
      
      unlink($xmlTmp);
      unlink($xmlTmp2);
      
      //$xmlTmp2 file not exists
      try {
        $obj->save();
      }
      catch (Exception $e) {
        return;
      }
 
      $this->fail("An expected exception has not been raised (file isn't writeable, file doesn't exits)");
    }

    /**
     * @covers dynaFormHandler::fixXmlFile
     * @todo   Implement testFixXmlFile().
     */
    public function testFixXmlFile()
    {
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->fixXmlFile();
      
      $this->assertTrue(count(file($this->dynaFormFile . ".xml")) >= count(file($xmlTmp)));
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::setHeaderAttribute
     * @todo   Implement testSetHeaderAttribute().
     */
    public function testSetHeaderAttribute()
    {
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->setHeaderAttribute("attribute1", "value1");
      
      $node = $this->getNode("dynaForm", $xmlTmp);
      
      $this->assertTrue($node->hasAttribute("attribute1"));
      $this->assertTrue($node->getAttribute("attribute1") == "value1");
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::modifyHeaderAttribute
     * @todo   Implement testModifyHeaderAttribute().
     */
    public function testModifyHeaderAttribute()
    {
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->setHeaderAttribute("attribute1", "value1");
      
      $node = $this->getNode("dynaForm", $xmlTmp);
      
      $this->assertTrue($node->hasAttribute("attribute1"));
      $this->assertTrue($node->getAttribute("attribute1") == "value1");
      
      $obj->modifyHeaderAttribute("attribute1", "value2");
      
      $node = $this->getNode("dynaForm", $xmlTmp);
      
      $this->assertTrue($node->hasAttribute("attribute1"));
      $this->assertTrue($node->getAttribute("attribute1") == "value2");
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::updateAttribute
     * @todo   Implement testUpdateAttribute().
     */
    public function testUpdateAttribute()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->updateAttribute($nodeName, "type", "title2");
      
      $node = $this->getNode($nodeName, $xmlTmp);
      
      $this->assertTrue($node->hasAttribute("type"));
      $this->assertTrue($node->getAttribute("type") == "title2");
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::remove
     * @todo   Implement testRemove().
     */
    public function testRemove()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->remove($nodeName); //XML_ELEMENT_NODE
      //$obj->remove("#text"); //XML_TEXT_NODE
      
      $this->assertTrue($this->nodeExists($nodeName, $xmlTmp) == 0);
      
      unlink($xmlTmp);
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->remove(array($nodeName));
      
      $this->assertTrue($this->nodeExists($nodeName, $xmlTmp) == 0);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::nodeExists
     * @todo   Implement testNodeExists().
     */
    public function testNodeExists()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $this->assertTrue($obj->nodeExists($nodeName));
      $this->assertFalse($obj->nodeExists($nodeName . "_"));
    }

    /**
     * @covers dynaFormHandler::moveUp
     * @todo   Implement testMoveUp().
     */
    public function testMoveUp()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $posPre = $this->getPosNode($nodeName, $xmlTmp);
      $pos    = ($posPre > 0)? $posPre - 1 : $this->numNodes($xmlTmp) - 1;
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->moveUp($nodeName);
      
      $this->assertTrue($this->getPosNode($nodeName, $xmlTmp) == $pos);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::moveDown
     * @todo   Implement testMoveDown().
     */
    public function testMoveDown()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $posPre = $this->getPosNode($nodeName, $xmlTmp);
      $pos    = ($posPre == $this->numNodes($xmlTmp) - 1)? 0 : $posPre + 1;
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->moveDown($nodeName);
      
      $this->assertTrue($this->getPosNode($nodeName, $xmlTmp) == $pos);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::getFields
     * @todo   Implement testGetFields().
     */
    public function testGetFields()
    {
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $array1 = $obj->getFields();
      $array2 = $obj->getFields(array("IN", "NOT_IN"));
      
      $this->assertTrue(is_array($array1));
      
      if (count($array1) > 0) {
        $this->assertTrue(is_object($array1[0]));
      }
      
      $this->assertTrue(is_array($array2));
      
      if (count($array2) > 0) {
        $this->assertTrue(is_object($array2[0]));
      }
    }

    /**
     * @covers dynaFormHandler::getFieldNames
     * @todo   Implement testGetFieldNames().
     */
    public function testGetFieldNames()
    {
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $array1 = $obj->getFieldNames();
      $array2 = $obj->getFieldNames(array("IN", "NOT_IN"));
      
      $this->assertTrue(is_array($array1));
      
      if (count($array1) > 0) {
        $this->assertTrue(is_string($array1[0]));
      }
      
      $this->assertTrue(is_array($array2));
      
      if (count($array2) > 0) {
        $this->assertTrue(is_string($array2[0]));
      }
    }

    /**
     * @covers dynaFormHandler::addChilds
     * @todo   Implement testAddChilds().
     */
    public function testAddChilds()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $obj->addChilds($nodeName, "value node");
      
      $obj->addChilds($nodeName, array("SUBNODE1" => "value node"));
      
      $this->assertTrue($this->nodeExists("SUBNODE1", $xmlTmp) == 1);
      
      $subsubNode = array(
        array("name" => "SUBNODE1SUBNODE1", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute")),
        array("name" => "SUBNODE1SUBNODE2", "value" => "value node", "attributes" => array("attribute1" => "value attribute", "attribute2" => "value attribute"))
      );
      
      $obj->addChilds($nodeName, array("SUBNODE1" => "value node"), $subsubNode);
      
      $this->assertTrue($this->nodeExists("SUBNODE1SUBNODE2", $xmlTmp) == 1);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::addOrUpdateChild
     * @todo   Implement testAddOrUpdateChild().
     */
    public function testAddOrUpdateChild()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $xmlTmp = $this->dynaFormFile . "Tmp.xml";
      
      copy($this->dynaFormFile . ".xml", $xmlTmp);
      
      $obj = new dynaFormHandler($xmlTmp);
      
      $node = $obj->getNode($nodeName);
      
      $obj->addOrUpdateChild($node, "en", "value node", array("attribute1" => "value1", "attribute2" => "value2"));
      
      $sw = 1;
      
      if ($node->hasChildNodes()) {
        foreach ($node->childNodes as $nodeAux) {
          if($nodeAux->nodeName == "en") {
            if (!($nodeAux->hasAttribute("attribute2") && $nodeAux->getAttribute("attribute2") == "value2")) {
              $sw = 0;
            }
          }
        }
      }
      
      $this->assertTrue($sw == 1);
      
      unlink($xmlTmp);
    }

    /**
     * @covers dynaFormHandler::getArray
     * @todo   Implement testGetArray().
     */
    public function testGetArray()
    {
      $arrayNodeName = $this->getRandNameNode(1, $this->dynaFormFile . ".xml");
      $nodeName = $arrayNodeName[0];
      
      $obj = new dynaFormHandler($this->dynaFormFile . ".xml");
      
      $node = $obj->getNode($nodeName);
      
      $array1 = $obj->getArray($node);
      $array2 = $obj->getArray($node, array("type"));
      
      $this->assertTrue(is_array($array1));
      $this->assertTrue(isset($array1["__nodeName__"]));
      $this->assertTrue(isset($array1["__nodeText__"]));
      
      if (isset($array1["en"])) {
        $this->assertTrue(is_array($array1["en"]));
      }
      
      $this->assertTrue(is_array($array2));
      $this->assertTrue(isset($array2["__nodeName__"]));
      $this->assertTrue(isset($array2["__nodeText__"]));
      
      if (isset($array2["en"])) {
        $this->assertTrue(is_array($array2["en"]));
      }
    }
}
