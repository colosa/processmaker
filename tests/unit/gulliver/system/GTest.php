<?php
  /*
   * @instantiate
   * class G
   */
  require_once PATH_TRUNK . 'gulliver' . PATH_SEP . "system" . PATH_SEP . "class.g.php";
  

  /**
   * Generated by PHPUnit_SkeletonGenerator on 2012-05-09 at 10:14:57.
   */
  class GTest extends PHPUnit_Framework_TestCase
  {  
    /**
     * @covers G::is_https
     * @todo Implement testIs_https().
     */

    public function testIs_https()
    {
      $this->assertFalse(G::is_https(), 'function: G::is_https no set $_SERVER[\'HTTPS\']');
         
      $_SERVER̈́['HTTPS'] = '';
      $this->assertFalse(G::is_https(), 'function: G::is_https set $_SERVER[\'HTTPS\'] = \'\' ');
        
      $_SERVER['HTTPS'] = 'on';
      $this->assertTrue(G::is_https(), 'function: G::is_https set $_SERVER[\'HTTPS\'] = \'on\' ');      
    }

    /**
     * @covers G::array_fill_value
     * @todo   Implement testArray_fill_value().
     */
    public function testArray_fill_value()
    {
      $arrayTest = '1';
      $arrayRes = G::array_fill_value($arrayTest);
      $this->assertTrue(is_array($arrayRes), 'function: G::array_fill_value var1 = \'1\' ');
      $this->assertEquals(count($arrayRes), 0, 'function: G::array_fill_value var1 = \'1\' ');

      // $recursive = false and new Value = ''
      $arrayTest = array('value1', 'valor', 'valór');
      $arrayCorrect = array('', '', '');
      $arrayRes = G::array_fill_value($arrayTest);
      $this->assertEquals($arrayCorrect, $arrayRes, 'function: G::array_fill_value var1 = array() ');

      // $recursive = false and new Value = 'valueTest'
      $arrayTest = array('value1', 'valor', 'valór');
      $arrayCorrect = array('valueTest', 'valueTest', 'valueTest');
      $arrayRes = G::array_fill_value($arrayTest, 'valueTest');
      $this->assertEquals($arrayCorrect, $arrayRes, 'function: G::array_fill_value var1 = array() ');

      // $recursive = false and new Value = 'valór'
      $arrayTest = array('value1', 'value2', 'value3');
      $arrayCorrect = array('valór', 'valór', 'valór');
      $arrayRes = G::array_fill_value($arrayTest,'valór');
      $this->assertEquals($arrayCorrect, $arrayRes, 'function: G::array_fill_value var1 = array() ');

      // $recursive = true and new Value = 'valueTest'
      $arrayTestSub1 = array('value11', 'value12', 'value13');
      $arrayTestSub2 = array('value21', 'value22', 'value23');
      $arrayTestSub3 = array('value31', 'value32', 'value33');
      $arrayTest = array('value1', $arrayTestSub1, $arrayTestSub1, $arrayTestSub1);
      $arrayRes = G::array_fill_value($arrayTest,'valueTest',true);
      $arrayCorrect = array(  'valueTest',
                              array('valueTest', 'valueTest', 'valueTest'),
                              array('valueTest', 'valueTest', 'valueTest'),
                              array('valueTest', 'valueTest', 'valueTest')
                            );
      $this->assertEquals($arrayRes, $arrayCorrect, 'function: G::array_fill_value var1 = array() ');
      
      // $recursive = true and new Value = 'valór'
      $arrayTestSub1 = array('value11', 'value12', 'value13');
      $arrayTestSub2 = array('value21', 'value22', 'value23');
      $arrayTestSub3 = array('value31', 'value32', 'value33');
      $arrayTest = array('value1', $arrayTestSub1, $arrayTestSub1, $arrayTestSub1);
      $arrayRes = G::array_fill_value($arrayTest,'valór',true);
      $arrayCorrect = array(  'valór',
                              array('valór', 'valór', 'valór'),
                              array('valór', 'valór', 'valór'),
                              array('valór', 'valór', 'valór')
                            );
      $this->assertEquals($arrayRes, $arrayCorrect, 'function: G::array_fill_value var1 = array() ');
        
      // $recursive = true and new Value = ''
      $arrayTestSub1 = array('value11', 'value12', 'value13');
      $arrayTestSub2 = array('value21', 'value22', 'value23');
      $arrayTestSub3 = array('value31', 'value32', 'value33');
      $arrayTest = array('value1', $arrayTestSub1, $arrayTestSub1, $arrayTestSub1);
      $arrayRes = G::array_fill_value($arrayTest,'',true);
      $arrayCorrect = array( '',
                             array('', '', ''),
                             array('', '', ''),
                             array('', '', '')
                           );
      $this->assertEquals($arrayRes, $arrayCorrect, 'function: G::array_fill_value var1 = array() ');
    }

    /**
     * @covers G::generate_password
     * @todo   Implement testGenerate_password().
     */
    public function testGenerate_password()
    {
      // $length = ''
      $responsePass = G::generate_password();
      $this->assertEquals(strlen($responsePass), 8, 'function: G::generate_password var1 = \'\' ');

      // $length = '10'
      $responsePass = G::generate_password(10);
      $this->assertEquals(strlen($responsePass), 10, 'function: G::generate_password var1 = \'10\' ');
    }

    /**
     * @covers G::array_concat
     * @todo   Implement testArray_concat().
     */
    public function testArray_concat()
    {
      // test with array empty
      $arrayTest = array();
      $arrayResponse = G::array_concat($arrayTest);
      $this->assertEquals($arrayResponse, array(), 'function: G::array_concat var1 = array() ');

      // test with array
      $arrayTest1 = array('value11','value12');
      $arrayTest2 = array('value21','value22');
      $arrayTest3 = array('value31','value32');
      $arrayTest = array($arrayTest1, $arrayTest2, $arrayTest3);
      $arrayResponse = G::array_concat($arrayTest);
      $arrayCorrect = array( array('value11', 'value12'),
                             array('value21', 'value22'),
                             array('value31', 'value32')
                           );
      $this->assertEquals($arrayResponse, $arrayCorrect, 'function: G::array_concat var1 = $arrayTest ');

      // test with array and 'valór'
      $arrayTest1 = array('value11','value12');
      $arrayTest2 = array('value21','value22');
      $arrayTest3 = array('valór','valór');
      $arrayTest = array($arrayTest1, $arrayTest2, $arrayTest3);
      $arrayResponse = G::array_concat($arrayTest);
      $arrayCorrect = array( array('value11', 'value12'),
                             array('value21', 'value22'),
                             array('valór', 'valór')
                           );
      $this->assertEquals($arrayResponse, $arrayCorrect, 'function: G::array_concat var1 = $arrayTest and \'valór\' ');
    }    

    /**
     * @covers G::var_compare
     * @todo   Implement testVar_compare().
     */
    public function testVar_compare()
    {
      // test with var1 = true, var 2 = true
      $this->assertTrue(G::var_compare(true,true), 'function: G::var_compare test with var1 = true, var 2 = true');

      // test with var1 = true, var 2 = false
      $this->assertFalse(G::var_compare(true,false), 'function: G::var_compare test with var1 = true, var 2 = false');

      // test with var1 = true, var2 = true, var3 = true
      $this->assertTrue(G::var_compare(true,true,true), 'function: G::var_compare test with var1 = true, var2 = true, var3 = true');
      
      // test with var1 = true, var2 = true, var3 = false
      $this->assertFalse(G::var_compare(true,true,false), 'function: G::var_compare test with var1 = true, var2 = true, var3 = false');
    }

    /**
     * @covers G::var_probe
     * @todo   Implement testVar_probe().
     */
    public function testVar_probe()
    {
      // test with array empty
      $this->assertEquals(G::var_probe(), 1, 'function: G::var_probe test with array empty');

      // test with var1 = 'string'
      $this->assertEquals(G::var_probe('string'), 'string', 'function: G::var_probe test with var1 = \'string\' ');

      // test with var1 = 'valór'
      $this->assertEquals(G::var_probe('valór'), 'valór', 'function: G::var_probe test with var1 = \'valór\' ');
    }

    /**
     * @covers G::getVersion
     * @todo   Implement testGetVersion().
     */
    public function testGetVersion()
    {
        /*
         * @not_testing_function 
         * Apparently the function is sent by value
         */
    }

    /**
     * @covers G::getIpAddress
     * @todo   Implement testGetIpAddress().
     */
    public function testGetIpAddress()
    {
        /*
         * @not_testing_function 
         * Variables of $_SERVER is required
         */
    }

    /**
     * @covers G::getMacAddress
     * @todo   Implement testGetMacAddress().
     */
    public function testGetMacAddress()
    {
      // test with mac address
      $response = G::getMacAddress();
      $element = explode(':', $response);
      $this->assertEquals(count($element), 6, 'function: G::getMacAddress length is 6');
      $this->assertEquals(strlen($element['0']), 2, 'function: G::getMacAddress element1 length is 2');
      $this->assertEquals(strlen($element['1']), 2, 'function: G::getMacAddress element2 length is 2');
      $this->assertEquals(strlen($element['2']), 2, 'function: G::getMacAddress element3 length is 2');
      $this->assertEquals(strlen($element['3']), 2, 'function: G::getMacAddress element4 length is 2');
      $this->assertEquals(strlen($element['4']), 2, 'function: G::getMacAddress element5 length is 2');
      $this->assertEquals(strlen($element['5']), 2, 'function: G::getMacAddress element6 length is 2');
    }

    /**
     * @covers G::microtime_float
     * @todo   Implement testMicrotime_float().
     */
    public function testMicrotime_float()
    {
      // test with return real number
      $response = G::microtime_float();
      $this->assertTrue(is_real($response), 'function: G::microtime_float return real number');
    }

    /**
     * @covers G::setFatalErrorHandler
     * @todo   Implement testSetFatalErrorHandler().
     */
    public function testSetFatalErrorHandler()
    {
        
        function testError($errno, $errstr, $errfile, $errline)
        {
            if (!(error_reporting() & $errno)) {
                return;
            }
        }

        $res = G::setFatalErrorHandler('testError');
        $this->assertTrue($res);
        
    }

    /**
     * @covers G::setErrorHandler
     * @todo   Implement testSetErrorHandler().
     */
    public function testSetErrorHandler()
    {
        function testError2($errno, $errstr, $errfile, $errline)
        {
            if (!(error_reporting() & $errno)) {
                return;
            }
        }

        $res = G::setFatalErrorHandler('testError2');
        $this->assertTrue($res);
    }

    /**
     * @covers G::fatalErrorHandler
     * @todo   Implement testFatalErrorHandler().
     */
    public function testFatalErrorHandler()
    {
        /*
         * @not_testing_function 
         * Variables buffer is required
         */
    }

    /**
     * @covers G::customErrorHandler
     * @todo   Implement testCustomErrorHandler().
     */
    public function testCustomErrorHandler()
    {
        /*
         * @not_testing_function 
         * Variables buffer is required
         */
    }

    /**
     * @covers G::showErrorSource
     * @todo   Implement testShowErrorSource().
     */
    public function testShowErrorSource()
    {
        /*
         * @not_testing_function 
         * Variables buffer is required
         */
    }

    /**
     * @covers G::customErrorLog
     * @todo   Implement testCustomErrorLog().
     */
    public function testCustomErrorLog()
    {
        /*
         * @not_testing_function 
         * Variables buffer is required
         */
    }

    /**
     * @covers G::verboseError
     * @todo   Implement testVerboseError().
     */
    public function testVerboseError()
    {
        /*
         * @not_testing_function 
         * Variables buffer is required
         */
    }

    /**
     * @covers G::encrypt
     * @todo   Implement testEncrypt().
     */
    public function testEncrypt()
    {
      // test with var = 'password', key = 'key'.. result is '6czY7OLU688'
      $encryptPassword = '6czY7OLU688';
      $encryptResponse = G::encrypt('password','key');
      $this->assertEquals($encryptResponse, $encryptPassword, 'function: G::encrypt test with var = \'password\', key = \'key\'.. result is \'6czY7OLU688\' ');

      // test with var = 'contraseña', key = 'llavé'.. result is 'DNva1egkHNEvEtc'
      $encryptPassword = 'DNva1egkHNEvEtc';
      $encryptResponse = G::encrypt('contraseña','llavé');
      $this->assertEquals($encryptResponse, $encryptPassword, 'function: G::encrypt test with var = \'contraseña\', key = \'llavé\'.. result is \'DNva1egkHNEvEtc\' ');
    }

    /**
     * @covers G::decrypt
     * @todo   Implement testDecrypt().
     */
    public function testDecrypt()
    {
      // test with var = '6czY7OLU688', key = 'key'.. result is 'password'
      $encryptPassword = 'password';
      $encryptResponse = G::decrypt('6czY7OLU688','key');
      $this->assertEquals($encryptResponse, $encryptPassword, 'function: G::encrypt test with var = \'6czY7OLU688\', key = \'key\'.. result is \'password\' ');

      // test with var = 'DNva1egkHNEvEtc', key = 'llavé'.. result is 'contraseña'
      $encryptPassword = 'contraseña';
      $encryptResponse = G::decrypt('DNva1egkHNEvEtc','llavé');
      $this->assertEquals($encryptResponse, $encryptPassword, 'function: G::encrypt test with var = \'DNva1egkHNEvEtc\', key = \'llavé\'.. result is \'contraseña\' ');
    }

    /**
     * @covers G::lookup
     * @todo   Implement testLookup().
     */
    public function testLookup()
    {
      // test with var = 'www.colosa.com'.. result should be '208.109.14.136'
      $address = 'www.colosa.com';
      $ip = '208.109.14.136';
      $response = G::lookup($address);
      $this->assertEquals($response, $ip, 'function: G::lookup test with var = \'www.colosa.com\'.. result should be \'208.109.14.136\' ');
        
      // test with var = '208.109.14.136'.. result should be 'linhost199.prod.mesa1.secureserver.net'
      $ip = '208.109.14.136';
      $address = 'linhost199.prod.mesa1.secureserver.net';
      $response = G::lookup($ip);
      $this->assertEquals($response,$address, 'test with var = \'208.109.14.136\'.. result should be \'linhost199.prod.mesa1.secureserver.net\' ');
    }

    /**
     * @covers G::mk_dir
     * @todo   Implement testMk_dir().
     */
    public function testMk_dir()
    {
      $newDir = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'directoryTemporal' ;
      G::mk_dir($newDir);
      $this->assertTrue(is_dir($newDir));
      if ( is_dir($newDir) )
      {
        rmdir($newDir);
      }
    }

    /**
     * @covers G::rm_dir
     * @todo   Implement testRm_dir().
     */
    public function testRm_dir()
    {
        /*
         * @error_function
         * function no remove directory
         

       $newDir = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'directoryTemporal' ;
       G::mk_dir($newDir,777);
       if ( is_dir($newDir) )
       {
           G::rm_dir($newDir);
           $this->assertFalse(is_dir($newDir));
       }

        */      
    }

    /**
     * @covers G::verifyPath
     * @todo   Implement testVerifyPath().
     */
    public function testVerifyPath()
    {
        $dirExist = PATH_HOME;
        $this->assertTrue(G::verifyPath($dirExist));
        
        $dirNoExist = PATH_HOME.'test';
        if ( is_dir($dirNoExist) ) {
            rmdir($dirNoExist);
        }
        $this->assertFalse(G::verifyPath($dirNoExist));

        $dirNoExist = PATH_HOME.'test';
        $this->assertFalse(G::verifyPath($dirNoExist,true));
        $this->assertTrue(G::verifyPath($dirNoExist));
        if ( is_dir($dirNoExist) ) {
            rmdir($dirNoExist);
        }
    }

    /**
     * @covers G::expandPath
     * @todo   Implement testExpandPath().
     */
    public function testExpandPath()
    {
        $valueResponse = G::expandPath('');
        $this->assertEquals($valueResponse, PATH_CORE);
        
        $valueResponse = G::expandPath('test');
        $this->assertEquals($valueResponse, PATH_CORE . "test/");
    }

    /**
     * @covers G::LoadSystem
     * @todo   Implement testLoadSystem().
     */
    public function testLoadSystem()
    {
        G::LoadSystem("controller");
        $this->assertTrue(class_exists('Controller'));
    }

    /**
     * @covers G::LoadSystemExist
     * @todo   Implement testLoadSystemExist().
     */
    public function testLoadSystemExist()
    {
        $this->assertTrue(G::LoadSystemExist("controller"));

        $this->assertFalse(G::LoadSystemExist("noExist"));
    }

    /**
     * @covers G::RenderPage
     * @todo   Implement testRenderPage().
     */
    public function testRenderPage()
    {
        /*
         * @not_testing_function 
         * I need render a page 

           template ob_get_contents
         */
    }

    /**
     * @covers G::LoadSkin
     * @todo   Implement testLoadSkin().
     */
    public function testLoadSkin()
    {
        /*
         * @not_testing_function 
         * I need view skin load 
         */
    }

    /**
     * @covers G::LoadInclude
     * @todo   Implement testLoadInclude().
     */
    public function testLoadInclude()
    {
        $this->assertTrue( G::LoadInclude('application') && class_exists('App') );
        $this->assertTrue( class_exists('App') );

        $this->assertTrue( G::LoadInclude('ajax') );
        $this->assertTrue( function_exists('ajax_show_menu') );

        $this->assertFalse( G::LoadInclude('test') );
    }

    /**
     * @covers G::LoadAllModelClasses
     * @todo   Implement testLoadAllModelClasses().
     */
    public function testLoadAllModelClasses()
    {
        /*
         * @not_testing_function 
         * I need instantiate Propel class 

        require_once PATH_TRUNK . 'gulliver' . PATH_SEP . "thirparty" . PATH_SEP . "propel" . PATH_SEP . "Propel.php";
        G::LoadAllModelClasses();
        $baseDir = PATH_CORE . 'classes' . PATH_SEP . 'model';
        if ($handle = opendir( $baseDir  )) {
          while ( false !== ($file = readdir($handle))) {
            if ( strpos($file, '.php',1) && !strpos($file, 'Peer.php',1) ) {
              $namesFiles = explode('.',$file);
              $this->assertTrue(class_exists($namesFiles['0']));
            }
          }
        }

        */
    }

    /**
     * @covers G::LoadAllPluginModelClasses
     * @todo   Implement testLoadAllPluginModelClasses().
     */
    public function testLoadAllPluginModelClasses()
    {
        /*
         * @not_testing_function 
         * I need instantiate a Plugin
        **/
    }

    /**
     * @covers G::LoadTemplate
     * @todo   Implement testLoadTemplate().
     */
    public function testLoadTemplate()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $fileName = 'testClassG.php';
        copy($pathDirectory. $fileName, G::ExpandPath( 'templates' ) . $fileName);
        

        G::LoadTemplate( 'testClassG' );

        $this->assertEquals( valueTestInclude(), 'TestInclude' );

        if ( is_dir(G::ExpandPath( 'templates' ) . $fileName) )
        {
            rmdir(G::ExpandPath( 'templates' ) . $fileName);
        }
    }

    /**
     * @covers G::LoadClassRBAC
     * @todo   Implement testLoadClassRBAC().
     */
    public function testLoadClassRBAC()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $fileName = 'class.testClassG.php';
        copy($pathDirectory. $fileName, PATH_RBAC . $fileName);
        

        G::LoadClassRBAC( 'testClassG' );

        $this->assertTrue( class_exists( 'TestClassG' ) );

        if ( is_dir( PATH_RBAC . $fileName ) )
        {
            rmdir( PATH_RBAC . $fileName );
        }
    }

    /**
     * @covers G::LoadClass
     * @todo   Implement testLoadClass().
     */
    public function testLoadClass()
    {
        G::LoadClass('cli');
        $this->assertTrue(class_exists('CLI'));

        G::LoadClass('rbac');
        $this->assertTrue(class_exists('RBAC'));

        $this->assertFalse(G::LoadClass('noExist'));
    }

    /**
     * @covers G::LoadThirdParty
     * @todo   Implement testLoadThirdParty().
     */
    public function testLoadThirdParty()
    {
        G::LoadThirdParty('lime','lime');
        $this->assertTrue(class_exists('lime_test'));
    }

    /**
     * @covers G::encryptlink
     * @todo   Implement testEncryptlink().
     */
    public function testEncryptlink()
    {
        $this->assertEquals(G::encryptlink('url'),'url');

        define('ENABLE_ENCRYPT', 'yes');    
        $urlEncrypt = 'qNWc';
        $this->assertEquals(G::encryptlink('url'),$urlEncrypt);
    }

    /**
     * @covers G::parseURI
     * @todo   Implement testParseURI().
     */
    public function testParseURI()
    {/*
        $test = 'http://brayan.pmos.colosa.net/sysos/en/uxmodern/main';
        $_SERVER["REQUEST_URI"] = $test;
        $res = G::parseURI($test);
        

        $this->assertEquals(SYS_LANG, 'en');
        $this->assertEquals(SYS_SKIN, 'uxmodern');
        $this->assertEquals(SYS_COLLECTION, 'main');
        
        
        //$this->assertEquals(SYS_SKIN, 'xxx');
        
        /*
         * @not_testing_function 
         * I need url 

         url
        **/
    }

    /**
     * @covers G::strip_slashes
     * @todo   Implement testStrip_slashes().
     */
    public function testStrip_slashes()
    {
        $stringTest = 'h\e\l\l\o'; 
        $this->assertEquals(G::strip_slashes($stringTest),'hello');

        $arrayTest = array('h\e\l\l\o', 'h\i' , 't\e\s\t');
        $arrayCorret = array('hello', 'hi' , 'test');
        $arrayResponse = G::strip_slashes($arrayTest);
        $this->assertEquals($arrayResponse, $arrayCorret );        
    }

    /**
     * @covers G::logTimeByPage
     * @todo   Implement testLogTimeByPage().
     */
    public function testLogTimeByPage()
    {
        $this->assertEquals(G::logTimeByPage(),false);

        /*
         * @not_testing_function 
         * I need directory /shared
        **/
    }

    /**
     * @covers G::streamCSSBigFile
     * @todo   Implement testStreamCSSBigFile().
     */
    public function testStreamCSSBigFile()
    {
        /*
         * @not_testing_function 
         * I need browser
        **/
    }

    /**
     * @covers G::streamJSTranslationFile
     * @todo   Implement testStreamJSTranslationFile().
     */
    public function testStreamJSTranslationFile()
    {
        /*
         * @not_testing_function 
         * I need browser
        **/
    }

    /**
     * @covers G::streamFile
     * @todo   Implement testStreamFile().
     */
    public function testStreamFile()
    {
        /*
         * @not_testing_function 
         * I need browser for view or download
        **/     
    }

    /**
     * @covers G::trimSourceCodeFile
     * @todo   Implement testTrimSourceCodeFile().
     */
    public function testTrimSourceCodeFile()
    {
        /*
         * @error_function
         * function no return code
         * pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
         * $fileName = 'class.testClassG.php';
         * 
         * $res = G::trimSourceCodeFile($pathDirectory. $fileName);
         * $res = G::trimSourceCodeFile($pathDirectory. $fileName);
         * 
         $code = "<?php
  function valueTestInclude ()
  {
    return 'TestInclude';
  }
?>";
         *  $this->assertEquals($response, $code);
         * 
         * 
         * 
         */
    }

    /**
     * @covers G::sendHeaders
     * @todo   Implement testSendHeaders().
     */
    public function testSendHeaders()
    {
        /*
         * @not_testing_function 
         * I need return text plain
        **/    
    }

    /**
     * @covers G::virtualURI
     * @todo   Implement testVirtualURI().
     */
    public function testVirtualURI()
    {
        /*
         * @moment
         * I need browser for view or download
        **/    
    }

    /**
     * @covers G::createUID
     * @todo   Implement testCreateUID().
     */
    public function testCreateUID()
    {
        $uidTest001 = 'cDhpajRHQ2paUQ______';
        $responseUID = G::createUID('test','001');
        $this->assertEquals($responseUID, $uidTest001);
    }

    /**
     * @covers G::getUIDName
     * @todo   Implement testGetUIDName().
     */
    public function testGetUIDName()
    {
        $uidTest001 = 'cDhpajRHQ2paUQ______';        
        $responseUID = G::getUIDName($uidTest001);
        $this->assertEquals($responseUID, 'test'.'001');
    }

    /**
     * @covers G::formatNumber
     * @todo   Implement testFormatNumber().
     */
    public function testFormatNumber()
    {
        $valueNum = 100;
        $responseNum = G::formatNumber($valueNum);
        $this->assertEquals($valueNum, $responseNum);
    }

    /**
     * @covers G::formatDate
     * @todo   Implement testFormatDate().
     */
    public function testFormatDate()
    {
        /*
        * @verify function does not return the correct value in the variable F
        *
        *
        */

        $valueFormatDate = Date('d j F m n y Y g G h H i s');
        $stringDate = G::formatDate(Date("Y-m-d H:i:s"), 'd j F m n y Y g G h H i s', 'es');
        //$this->assertEquals($valueFormatDate, $responseNum);
    }

    /**
     * @covers G::getformatedDate
     * @todo   Implement testGetformatedDate().
     */
    public function testGetformatedDate()
    {
        /*
        * @verify function does not return the correct value in the variable F
        *
        *
        */

        $valueFormatDate = Date('d j F m n y Y g G h H i s');
        $stringDate = G::formatDate(Date("Y-m-d H:i:s"), 'd j F m n y Y g G h H i s', 'es');
        //$this->assertEquals($valueFormatDate, $responseNum);
    }

    /**
     * @covers G::arrayDiff
     * @todo   Implement testArrayDiff().
     */
    public function testArrayDiff()
    {
        $arrayValues1 = array('value1', 'value2', 'value3', 'value4', 'value5', 'value6', 'value7', 'value8');
        $arrayValues2 = array('value1', 'value2', 'value3', 'value4');
        $arrayCorrect = array('value5', 'value6', 'value7', 'value8');
        $arrayRes = G::arrayDiff($arrayValues1, $arrayValues2);
        $this->assertEquals($arrayRes, $arrayCorrect);

        $arrayRes = G::arrayDiff($arrayValues2, $arrayValues1);
        $this->assertEquals(count($arrayRes), 0);
    }

    /**
     * @covers G::complete_field
     * @todo   Implement testComplete_field().
     */
    public function testComplete_field()
    {
        $intTest1 = 145;
        $valueResponse = G::complete_field($intTest1, 3, 1);
        $this->assertEquals($valueResponse, '145');
        
        $intTest1 = 145;
        $valueResponse = G::complete_field($intTest1, 5, 1);
        $this->assertEquals($valueResponse, '00145');

        $intTest1 = 'test';
        $valueResponse = G::complete_field($intTest1, 3, 2);
        $this->assertEquals($valueResponse, 'test');

        $intTest1 = 'test';
        $valueResponse = G::complete_field($intTest1, 8, 2);
        $this->assertEquals($valueResponse, '    test');

        $intTest1 = 541;
        $valueResponse = G::complete_field($intTest1, 3, 2);
        $this->assertEquals($valueResponse, '541.');

        $intTest1 = 541;
        $valueResponse = G::complete_field($intTest1, 5, 2);
        $this->assertEquals($valueResponse, '00541.');

        $intTest1 = 541.45;
        $valueResponse = G::complete_field($intTest1, 3, 2);
        $this->assertEquals($valueResponse, '541.45');

        $intTest1 = 541.45;
        $valueResponse = G::complete_field($intTest1, 5, 2);
        $this->assertEquals($valueResponse, '00541.45');
    }

    /**
     * @covers G::sqlEscape
     * @todo   Implement testSqlEscape().
     */
    public function testSqlEscape()
    {

        $query = "SELECT * FROM APPLICATION where 'TEST' = 'TEST'";
        $response = G::sqlEscape($query);
        $correct = "SELECT * FROM APPLICATION where \'TEST\' = \'TEST\'";
        $this->assertEquals($correct, $response);

        define( 'DB_ADAPTER', 'myxml' );
        $query = "SELECT * FROM APPLICATION where 'TEST' = 'TEST'";
        $response = G::sqlEscape($query);
        $correct = "SELECT * FROM APPLICATION where ''TEST'' = ''TEST''";
        $this->assertEquals($correct, $response);

    }

    /**
     * @covers G::MySQLSintaxis
     * @todo   Implement testMySQLSintaxis().
     */
    public function testMySQLSintaxis()
    {
        $this->assertFalse(G::MySQLSintaxis());
    }

    /**
     * @covers G::replaceDataField
     * @todo   Implement testReplaceDataField().
     */
    public function testReplaceDataField()
    {
        $_SESSION["APPLICATION"]  = "APP1";
        $_SESSION["PROCESS"]      = "PRO1";
        $_SESSION["TASK"]         = "TASK1";
        $_SESSION["INDEX"]        = "INDEX1";
        $_SESSION["USER_LOGGED"]  = "LOGGED1";
        $_SESSION["USR_USERNAME"] = "USERNAME1";

        $result = array('VAR1' => 'VALUE1');
        $query = '  SELECT * FROM APPLICATION WHERE APPLITACION = @@APPLITACION AND
                    PROCESS = @@PROCESS AND TASK = @@TASK AND
                    INDEX = @@INDEX AND USER_LOGGED = @@USER_LOGGED AND
                    USR_USERNAME = @@USR_USERNAME AND VAR1 = @@VAR1';
        $queryCorrect = '   SELECT * FROM APPLICATION WHERE APPLITACION = "APP1" AND
                            PROCESS = "PROCESS" AND TASK = "TASK" AND
                            INDEX = "INDEX" AND USER_LOGGED = "USER_LOGGED" AND
                            USR_USERNAME = "USR_USERNAME" AND VAR1 = "VAR1"';
        $queryResponse = G::replaceDataField($query, $result);
        $this->assertEquals($queryResponse, $queryResponse);        
    }

    /**
     * @covers G::loadLanguageFile
     * @todo   Implement testLoadLanguageFile().
     */
    public function testLoadLanguageFile()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $fileName = 'testClassG.xml';
        //$res = G::loadLanguageFile($pathDirectory. $fileName);
        /*
         * @verify function is directory PATH_CORE and obsolete
         *
         */  
    }

    /**
     * @covers G::registerLabel
     * @todo   Implement testRegisterLabel().
     */
    public function testRegisterLabel()
    {
        $this->assertEquals(G::registerLabel('value1', 'value2'), 1);
        /*
         * @verify function is comment and obsolete
         *
         */
    }

    /**
     * @covers G::LoadMenuXml
     * @todo   Implement testLoadMenuXml().
     */
    public function testLoadMenuXml()
    {
        /*
         * @verify function is directory PATH_CORE and obsolete Redirect languages
         *
         */
    }

    /**
     * @covers G::SendMessageXml
     * @todo   Implement testSendMessageXml().
     */
    public function testSendMessageXml()
    {
        /*
         * @verify function is directory PATH_CORE and obsolete Redirect languages
         *
         */
    }

    /**
     * @covers G::SendTemporalMessage
     * @todo   Implement testSendTemporalMessage().
     */
    public function testSendTemporalMessage()
    {
        /*
         * @not_testing_function 
         * I need a page
        **/  
    }

    /**
     * @covers G::SendMessage
     * @todo   Implement testSendMessage().
     */
    public function testSendMessage()
    {
        G::SendMessage ( 15, "error");
        $this->assertEquals('**15**', $_SESSION['G_MESSAGE']);
        $this->assertEquals('error', $_SESSION['G_MESSAGE_TYPE']);
    }

    /**
     * @covers G::SendMessageText
     * @todo   Implement testSendMessageText().
     */
    public function testSendMessageText()
    {
        G::SendMessageText ( 'alert', 'error');
        $this->assertEquals('alert', $_SESSION['G_MESSAGE']);
        $this->assertEquals('error', $_SESSION['G_MESSAGE_TYPE']);
    }

    /**
     * @covers G::LoadMessage
     * @todo   Implement testLoadMessage().
     */
    public function testLoadMessage()
    {
        /*
         * @verify function is obsolete and have return
         *
         */
    }

    /**
     * @covers G::LoadXmlLabel
     * @todo   Implement testLoadXmlLabel().
     */
    public function testLoadXmlLabel()
    {
        $response = 'xxxxxx';
        $this->assertEquals(G::LoadXmlLabel('test'),'xxxxxx');        
    }

    /**
     * @covers G::LoadMessageXml
     * @todo   Implement testLoadMessageXml().
     */
    public function testLoadMessageXml()
    {
        /*
         * @verify function is directory PATH_CORE and obsolete Redirect languages
         *
         */
    }

    /**
     * @covers G::LoadTranslationObject
     * @todo   Implement testLoadTranslationObject().
     */
    public function testLoadTranslationObject()
    {
        global $translation;
        $this->assertEquals($translation['ABOUT'], 'About');
        G::LoadTranslationObject('es');
        $this->assertEquals($translation['ABOUT'], 'Acerca de');
    }

    /**
     * @covers G::LoadTranslation
     * @todo   Implement testLoadTranslation().
     */
    public function testLoadTranslation()
    {
        $res =  G::LoadTranslation('ABOUT');
        $this->assertEquals($res, 'Acerca de');
    }

    /**
     * @covers G::getTranslations
     * @todo   Implement testGetTranslations().
     */
    public function testGetTranslations()
    {
        $test = array( 'ABOUT' );
        $correct = array( 'ABOUT' => 'Acerca de' );
        $res =  G::getTranslations( $test );
        $this->assertEquals($res, $correct);
    }

    /**
     * @covers G::LoadArrayFile
     * @todo   Implement testLoadArrayFile().
     */
    public function testLoadArrayFile()
    {
        $this->assertEquals(G::LoadArrayFile(),null);
    }

    /**
     * @covers G::expandUri
     * @todo   Implement testExpandUri().
     */
    public function testExpandUri()
    {
        /*
         * @not testing function NO TRANSLATION
         *
         */
    }

    /**
     * @covers G::genericForceLogin
     * @todo   Implement testGenericForceLogin().
     */
    public function testGenericForceLogin()
    {
        /*
         * @not testing function NO TRANSLATION
         *
         */
    }

    /**
     * @covers G::capitalize
     * @todo   Implement testCapitalize().
     */
    public function testCapitalize()
    {
        $name = 'brayan';
        $this->assertEquals('Brayan',G::capitalize($name));
    }

    /**
     * @covers G::toUpper
     * @todo   Implement testToUpper().
     */
    public function testToUpper()
    {
        $name = 'brayan';
        $this->assertEquals('BRAYAN',G::toUpper($name));
    }

    /**
     * @covers G::toLower
     * @todo   Implement testToLower().
     */
    public function testToLower()
    {
        $name = 'BRAYAN';
        $this->assertEquals('brayan',G::toLower($name));
    }

    /**
     * @covers G::http_build_query
     * @todo   Implement testHttp_build_query().
     */
    public function testHttp_build_query()
    {
        $response = G::http_build_query(array('valor1','valor2'),'num','val');
        $this->assertEquals('val[num0]=valor1&val[num1]=valor2', $response);
    }

    /**
     * @covers G::header
     * @todo   Implement testHeader().
     */
    public function testHeader()
    {
        /*
         * @not testing function I need redirect
         *
         */
    }

    /**
     * @covers G::forceLogin
     * @todo   Implement testForceLogin().
     */
    public function testForceLogin()
    {
        /*
         * @not testing function I need redirect
         *
         */
    }

    /**
     * @covers G::add_slashes
     * @todo   Implement testAdd_slashes().
     */
    public function testAdd_slashes()
    {
        $test = '"test"';
        $response = G::add_slashes($test);
        $this->assertEquals($response, '\"test\"');

        $test = "'test1'";
        $response = G::add_slashes($test);
        $this->assertEquals($response, "\'test1\'");

        $test = '\'test1\'';
        $response = G::add_slashes($test);
        $this->assertEquals($response, "\'test1\'");
    }

    /**
     * @covers G::uploadFile
     * @todo   Implement testUploadFile().
     */
    public function testUploadFile()
    {
        /*
         * @not testing function I need upload file
         *
         */
    }

    /**
     * @covers G::resizeImage
     * @todo   Implement testResizeImage().
     */
    public function testResizeImage()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        G::resizeImage($pathDirectory . 'image.jpg', '100', '100', $pathDirectory . 'newImage.jpg');

        if( is_file($pathDirectory . 'newImage.jpg'))
        {
            $info = getimagesize($pathDirectory . 'newImage.jpg');
            $correct = array (  100,
                                100,
                                2,
                                'width="100" height="100"',
                                'bits' => 8,
                                'channels' => 3,
                                'mime' => 'image/jpeg');
            $this->assertEquals($info, $correct);
            unlink($pathDirectory . 'newImage.jpg');
        } else {
            $this->assertTrue(is_file($pathDirectory . 'newImage.jpg'));
        }
    }

    /**
     * @covers G::array_merges
     * @todo   Implement testArray_merges().
     */
    public function testArray_merges()
    {
        $arrayTest1 = array(  'camp1' => 'val1',
                              'camp2' => 'val2',
                              'camp3' => 'val3',
                              'camp4' => 'val4'
                            );

        $arrayTest2 = array(  'camp1' => '1',
                              'camp2' => '2'
                            );

        $arrayResponse = G::array_merges($arrayTest1, $arrayTest2);
        $this->assertEquals($arrayResponse['camp1'],'1');
        $this->assertEquals($arrayResponse['camp2'],'2');

        $arrayResponse = G::array_merges($arrayTest2, $arrayTest1);
        $this->assertEquals($arrayResponse['camp3'],'val3');
        $this->assertEquals($arrayResponse['camp4'],'val4');
    }

    /**
     * @covers G::array_merge_2
     * @todo   Implement testArray_merge_2().
     */
    public function testArray_merge_2()
    {
        $arrayTest1 = array(  'camp1' => 'val1',
                              'camp2' => 'val2',
                              'camp3' => 'val3',
                              'camp4' => 'val4'
                            );

        $arrayTest2 = array(  'camp1' => '1',
                              'camp2' => '2'
                            );

        $arrayResponse = G::array_merge_2($arrayTest1, $arrayTest2);
        $this->assertEquals($arrayTest1['camp1'],'1');
        $this->assertEquals($arrayTest1['camp2'],'2');

        $arrayResponse = G::array_merge_2($arrayTest2, $arrayTest1);
        $this->assertEquals($arrayTest2['camp3'],'val3');
        $this->assertEquals($arrayTest2['camp4'],'val4');
    }

    /**
     * @covers G::generateUniqueID
     * @todo   Implement testGenerateUniqueID().
     */
    public function testGenerateUniqueID()
    {
        $uid = G::generateUniqueID();
        $this->assertTrue(is_string($uid) && (strlen($uid) == 32));
    }

    /**
     * @covers G::generateCode
     * @todo   Implement testGenerateCode().
     */
    public function testGenerateCode()
    {
        $uid = G::generateCode();
        $this->assertTrue(is_numeric($uid) && (strlen($uid) == 4));

        $uid = G::generateCode(10);
        $this->assertTrue(is_numeric($uid) && (strlen($uid) == 10));

        $uid = G::generateCode('ALPHA');
        $this->assertTrue(is_string($uid) && (strlen($uid) == 4));
    }

    /**
     * @covers G::verifyUniqueID
     * @todo   Implement testVerifyUniqueID().
     */
    public function testVerifyUniqueID()
    {
        $uid = G::generateUniqueID();
        $response = G::verifyUniqueID($uid);
        $this->assertTrue($response);        
    }

    /**
     * @covers G::is_utf8
     * @todo   Implement testIs_utf8().
     */
    public function testIs_utf8()
    {
        $this->assertTrue(G::is_utf8('árbol'));
        $this->assertTrue(G::is_utf8('&aacute;rbol'));
    }

    /**
     * @covers G::CurDate
     * @todo   Implement testCurDate().
     */
    public function testCurDate()
    {
        $dateNow = Date('Y-m-d H:i:s');
        $this->assertEquals($dateNow,G::CurDate());

        $dateNow = Date('H:i:s');
        $this->assertEquals($dateNow,G::CurDate('H:i:s'));
    }

    /**
     * @covers G::getSystemConstants
     * @todo   Implement testGetSystemConstants().
     */
    public function testGetSystemConstants()
    {
        $response = G::getSystemConstants();
        $this->assertTrue(is_array($response));
    }

    /**
     * @covers G::capitalizeWords
     * @todo   Implement testCapitalizeWords().
     */
    public function testCapitalizeWords()
    {
        $response = G::capitalizeWords('brian real');
        $this->assertEquals('Brian Real', $response);
    }

    /**
     * @covers G::unhtmlentities
     * @todo   Implement testUnhtmlentities().
     */
    public function testUnhtmlentities()
    {
        $response = G::unhtmlentities('&aacute;rbol');
        $this->assertEquals($response, 'árbol');
    }

    /**
     * @covers G::xmlParser
     * @todo   Implement testXmlParser().
     */
    public function testXmlParser()
    {
        /*
        $correct = new stdClass();
        $correct->code = 76;
        $correct->code = 'Mismatched tag';
        $correct->result = array( 'xml' => 
                                            array ( '__ATTRIBUTES__' => array ('type' => 'form') ,
                                                    '__CONTENT__' => 
                                );
        $test = '<xml type="form"> <var1 value="value1"></var1> <var2>value2</var2> </form> </xml>';
        G::xmlParser
[code] => 76
    [message] => Mismatched tag
    [result] => Array
        (
            [xml] => Array
                (
                    [__ATTRIBUTES__] => Array
                        (
                            [type] => form
                        )

                    [__CONTENT__] => Array
                        (
                            [var1] => Array
                                (
                                    [__ATTRIBUTES__] => Array
                                        (
                                            [value] => value1
                                        )

                                    [__VALUE__] => 
                                )

                            [var2] => Array
                                (
                                    [__VALUE__] => value2
                                )

                        )

                )

        )
*/

        /*
         * @not testing function I need xml file
         * taxto con xml
         */
    }

    /**
     * @covers G::_del_p
     * @todo   Implement test_del_p().
     */
    public function test_del_p()
    {
        $test = array(  '1' => 'value1', 
                        '2' => 'value2', 
                        '_p' => 'value3', 
                        array(  '0' => 'v1', 
                                array(  '0' => 'v1',
                                         '_p' => 'fin'
                                    )
                            )
                    );
        $correctArray = array(  '1' => 'value1', 
                                '2' => 'value2', 
                                array(  '0' => 'v1', 
                                        array(  '0' => 'v1'
                                            )
                                    )
                            );
        G::_del_p($test);
        $this->assertEquals($test, $correctArray);
    }

    /**
     * @covers G::ary2xml
     * @todo   Implement testAry2xml().
     */
    public function testAry2xml()
    {
        /*
        * @verify function no work
        *

        $test = array(  'I1' => 'valor1',
                        'I2' => 'valor2',
                        'I3' => 'valor3',
                        array( 'I4' => 'value4')
                );
        G::ary2xml($test);
        */
    }

    /**
     * @covers G::ins2ary
     * @todo   Implement testIns2ary().
     */
    public function testIns2ary()
    {
        $test = array('value1', 'value2');
        G::ins2ary($test,'newValue',0);
        $this->assertEquals($test['0'],'newValue');
        $this->assertEquals($test['1'],'value1');
    }

    /**
     * @covers G::evalJScript
     * @todo   Implement testEvalJScript().
     */
    public function testEvalJScript()
    {
        /*
         * @not testing function I need browser
         * print
         */
    }

    /** 
     * @covers G::inflect
     * @todo   Implement testInflect().
     */
    public function testInflect()
    {
        $this->assertEquals( G::inflect('àchélo'), 'achelo');
    }

    /**
     * @covers G::pr
     * @todo   Implement testPr().
     */
    public function testPr()
    {
        /*
         * @not testing function I need show print
         *
         */
    }

    /**
     * @covers G::dump
     * @todo   Implement testDump().
     */
    public function testDump()
    {
        /*
         * @not testing function I need show print
         *
         */
    }

    /**
     * @covers G::stripCDATA
     * @todo   Implement testStripCDATA().
     */
    public function testStripCDATA()
    {
        $this->assertEquals('value',G::stripCDATA('<![CDATA[value]]>'));
    }

    /**
     * @covers G::sys_get_temp_dir
     * @todo   Implement testSys_get_temp_dir().
     */
    public function testSys_get_temp_dir()
    {
        $tmpDir = G::sys_get_temp_dir();
        $this->assertFileExists($tmpDir);
        $this->assertTrue(is_writable($tmpDir));
    }

    /**
     * @covers G::PMWSCompositeResponse
     * @todo   Implement testPMWSCompositeResponse().
     */
    public function testPMWSCompositeResponse()
    {
        /*
         * @not testing function I need web services
         *
         */
    }

    /**
     * @covers G::emailAddress
     * @todo   Implement testEmailAddress().
     */
    public function testEmailAddress()
    {
        $this->assertFalse(G::emailAddress('email'));

        $response = G::emailAddress('test@email.com');
        $this->assertEquals('test@email.com',$response->email);
        $this->assertEquals('',$response->name);
        
        $response = G::emailAddress('Person<test@email.com>');
        $this->assertEquals('test@email.com',$response->email);
        $this->assertEquals('Person',$response->name);        
    }

    /**
     * @covers G::json_encode
     * @todo   Implement testJson_encode().
     */
    public function testJson_encode()
    {
        $arrayTest = array( 'pos1' => 'value1',
                            'pos2' => 'value2',
                            'pos3' => 'value3',
                        );
        $response = G::json_encode($arrayTest);
        $this->assertEquals('{"pos1":"value1","pos2":"value2","pos3":"value3"}',$response);
    }

    /**
     * @covers G::json_decode
     * @todo   Implement testJson_decode().
     */
    public function testJson_decode()
    {
        $jsonTest = '{"pos1":"value1","pos2":"value2","pos3":"value3"}';
        $response = G::json_decode($jsonTest);
        $this->assertEquals($response->pos1, 'value1');
        $this->assertEquals($response->pos2, 'value2');
        $this->assertEquals($response->pos3, 'value3');
    }

    /**
     * @covers G::isHttpRequest
     * @todo   Implement testIsHttpRequest().
     */
    public function testIsHttpRequest()
    {
        $response = G::isHttpRequest();
        $this->assertFalse($response);

        $_SERVER['SERVER_SOFTWARE'] = 'Apache/2.2.8 (CentOS)';
        $response = G::isHttpRequest();
        $this->assertTrue($response);
    }

    /**
     * @covers G::sendMail
     * @todo   Implement testSendMail().
     */
    public function testSendMail()
    {
        /*
         * @not testing function I need view send mail
         *
         */
    }

    /**
     * @covers G::envelopEmailAddresses
     * @todo   Implement testEnvelopEmailAddresses().
     */
    public function testEnvelopEmailAddresses()
    {
        $dataAddresses = array( 'to' => 'test1@colosa.com',
                                'cc' => array(  'test2@colosa.com <Email Test2>',
                                                'test3@colosa.com',
                                                'test4@colosa.com'
                                              ),
                                'bcc'=> array(  'test5@colosa.com')
                               );
        $response = G::envelopEmailAddresses($dataAddresses);


        $this->assertEquals($response['to']['0']['0'], 'test1@colosa.com');
        /*
        $this->assertEquals($response['cc']['0']['0'], 'test2@colosa.com');
        $this->assertEquals($response['cc']['0']['1'], 'test3@colosa.com');
        $this->assertEquals($response['cc']['0']['2'], 'test4@colosa.com');
        */
        $this->assertEquals($response['bcc']['0']['0'], 'test5@colosa.com');        
    }

    /**
     * @covers G::gettype
     * @todo   Implement testGettype().
     */
    public function testGettype()
    {
        $value = NULL; 
        //$this->assertEquals(G::gettype($value),'NULL');
        // Remove the following lines when you implement this test.
        // function no work with null

        $value = true;
        $this->assertEquals(G::gettype($value),'boolean');

        $value = 15.25;
        $this->assertEquals(G::gettype($value),'double');

        $value = 142;
        $this->assertEquals(G::gettype($value),'integer');

        $value = 'string';
        $this->assertEquals(G::gettype($value),'string');

        $value = array('val1', 'val2');
        $this->assertEquals(G::gettype($value),'array');

        $value = new stdClass();
        $this->assertEquals(G::gettype($value),'object');

        // need conexion BD is_resource

    }

    /**
     * @covers G::removeComments
     * @todo   Implement testRemoveComments().
     */
    public function testRemoveComments()
    {
        $value = 'code1 /* comment 1 */  code2 code3';
        $response = G::removeComments($value);
        $this->assertEquals('code1 code2 code3',$response);
    }

    /**
     * @covers G::getMemoryUsage
     * @todo   Implement testGetMemoryUsage().
     */
    public function testGetMemoryUsage()
    {
        $response = G::getMemoryUsage();
        $mb = "Mb";
        $this->assertTrue($response != '' && strpos($response, $mb));
    }

    /**
     * @covers G::getFormatUserList
     * @todo   Implement testGetFormatUserList().
     */
    public function testGetFormatUserList()
    {
        $aUserInfo['USR_USERNAME'] = 'fontiveros';
        $aUserInfo['USR_FIRSTNAME'] = 'Fernando';
        $aUserInfo['USR_LASTNAME'] = 'Ontiveros';

        $response = G::getFormatUserList('@firstName @lastName', $aUserInfo);
        $this->assertEquals('Fernando Ontiveros',$response);

        $response = G::getFormatUserList('@firstName @lastName (@userName)', $aUserInfo);
        $this->assertEquals('Fernando Ontiveros (fontiveros)',$response);

        $response = G::getFormatUserList('@userName', $aUserInfo);
        $this->assertEquals('fontiveros',$response);

        $response = G::getFormatUserList('@userName (@firstName @lastName)', $aUserInfo);
        $this->assertEquals('fontiveros (Fernando Ontiveros)',$response);

        $response = G::getFormatUserList('@lastName @firstName', $aUserInfo);
        $this->assertEquals('Ontiveros Fernando',$response);

        $response = G::getFormatUserList('@lastName, @firstName', $aUserInfo);
        $this->assertEquals('Ontiveros, Fernando',$response);

        $response = G::getFormatUserList('@lastName, @firstName (@userName)', $aUserInfo);
        $this->assertEquals('Ontiveros, Fernando (fontiveros)',$response);

        $response = G::getFormatUserList('test', $aUserInfo);
        $this->assertEquals('fontiveros',$response);      
    }

    /**
     * @covers G::getModel
     * @todo   Implement testGetModel().
     */
    public function testGetModel()
    {
        /*
        require_once PATH_TRUNK . 'gulliver' . PATH_SEP . 'thirparty' . PATH_SEP . 'propel' . PATH_SEP . 'Propel.php';
        $model = 'AdditionalTables';
        $additionalTables = G::getModel($model);
        $this->assertTrue(is_object($additionalTables) && class_exists($model));

        * @not testing function I need class propel
        */        
    }

    /**
     * @covers G::is_rwritable
     * @todo   Implement testIs_rwritable().
     */
    public function testIs_rwritable()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $this->assertTrue(G::is_rwritable($pathDirectory . 'testClassG.php'));
        
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'noWriteble';
        $this->assertFalse(G::is_rwritable($pathDirectory));
    }

    /**
     * @covers G::rglob
     * @todo   Implement testRglob().
     */
    public function testRglob()
    {
        $pathDirectory = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $files = array(  PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'class.testClassG.php' ,
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'image.jpg',
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'noWriteble',
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.en',                    
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini',
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.php',
                    PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.xml'
                );

        $res = G::rglob('*',0,$pathDirectory);

        $this->assertEquals($res, $files);
    }

    /**
     * @covers G::browser_detection
     * @todo   Implement testBrowser_detection().
     */
    public function testBrowser_detection()
    {
        $res = G::browser_detection('moz_version');
        $this->assertTrue(is_array($res));
    }

    /**
     * @covers G::get_os_data
     * @todo   Implement testGet_os_data().
     */
    public function testGet_os_data()
    {
        /*
        * @not testing function I need OS an d browser
        *        
        */       
    }

    /**
     * @covers G::get_item_version
     * @todo   Implement testGet_item_version().
     */
    public function testGet_item_version()
    {
        /*
        * @not testing function I need OS an d browser
        *        
        */ 
    }

    /**
     * @covers G::get_set_count
     * @todo   Implement testGet_set_count().
     */
    public function testGet_set_count()
    {
        $this->assertEquals(G::get_set_count('get'),1);
        $this->assertEquals(G::get_set_count('set',0),'');
    }

    /**
     * @covers G::check_is_mobile
     * @todo   Implement testCheck_is_mobile().
     */
    public function testCheck_is_mobile()
    {
        $res = G::check_is_mobile('android 2.31');
        $this->assertEquals( $res, 'android');        
    }

    /**
     * @covers G::get_mobile_data
     * @todo   Implement testGet_mobile_data().
     */
    public function testGet_mobile_data()
    {
        $res = G::get_mobile_data('iemobile 2.31');
        $correct = array( '', 'iemobile', '', '', '', '', '', '');
        $this->assertEquals($res, $correct);
    }

    /**
     * @covers G::getBrowser
     * @todo   Implement testGetBrowser().
     */
    public function testGetBrowser()
    {
        $this->assertTrue(is_array(G::getBrowser()));        
    }

    /**
     * @covers G::script_time
     * @todo   Implement testScript_time().
     */
    public function testScript_time()
    {
        /*
        * @not testing function I static var static $script_time
        *        
        */ 
    }

    /**
     * @covers G::getDirectorySize
     * @todo   Implement testGetDirectorySize().
     */
    public function testGetDirectorySize()
    {
        $path = PATH_TRUNK . 'gulliver' . PATH_SEP . "system";
        $response = G::getDirectorySize($path);
        $this->assertTrue(is_array($response) && count($response));
    }

    /**
     * @covers G::getCacheFileNameByPattern
     * @todo   Implement testGetCacheFileNameByPattern().
     */
    public function testGetCacheFileNameByPattern()
    {
        $response = G::getCacheFileNameByPattern(PATH_TRUNK . 'gulliver' . PATH_SEP . "system" . PATH_SEP . "class.g.php" ,'');
        $this->assertTrue(is_array($response) && count($response));
    }

    /**
     * @covers G::getCheckSum
     * @todo   Implement testGetCheckSum().
     */
    public function testGetCheckSum()
    {
        $response = G::getCheckSum(PATH_TRUNK . 'gulliver' . PATH_SEP . "system" . PATH_SEP . "class.g.php");
        $this->assertTrue(is_string($response));
    }

    /**
     * @covers G::parse_ini_string
     * @todo   Implement testParse_ini_string().
     */
    public function testParse_ini_string()
    {
        $test = "var1 = value1
var2 = value2
var3 = value3
var4 = value4";
        $corret = array(    'var1' => 'value1',
                            'var2' => 'value2',
                            'var3' => 'value3',
                            'var4' => 'value4',
                        );
        $res = G::parse_ini_string($test);
        $this->assertEquals($res, $corret);
    }

    /**
     * @covers G::disableEnableINIvariable
     * @todo   Implement testDisableEnableINIvariable().
     */
    public function testDisableEnableINIvariable()
    {
        $pathIni = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini';
        $iniElements = parse_ini_file($pathIni);
        if($iniElements['a'] == '1')
        {
            G::disableEnableINIvariable($pathIni, 'a');
            $iniElements = parse_ini_file($pathIni);
            $this->assertEquals('0', $iniElements['a']);
        }

        if($iniElements['a'] == '0')
        {
            G::disableEnableINIvariable($pathIni, 'a');
            $iniElements = parse_ini_file($pathIni);
            $this->assertEquals('1', $iniElements['a']);
        }

        if($iniElements['a'] == '1')
        {
            G::disableEnableINIvariable($pathIni, 'a');
            $iniElements = parse_ini_file($pathIni);
            $this->assertEquals('0', $iniElements['a']);
        }
    }

    /**
     * @covers G::setINIvariable
     * @todo   Implement testSetINIvariable().
     */
    public function testSetINIvariable()
    {
        $pathIni = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini';
        G::setINIvariable($pathIni, 'z', '999');

        $res = parse_ini_file($pathIni);
        $this->assertEquals($res['z'], '999');
    }

    /**
     * @covers G::write_php_ini
     * @todo   Implement testWrite_php_ini().
     */
    public function testWrite_php_ini()
    {
        $pathIni = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini';
        $start = parse_ini_file($pathIni);
        $env = array( 'var1' => 'v1', 'var2' => 'v2');
        G::write_php_ini($pathIni, $env);
        $res = parse_ini_file($pathIni);
        $this->assertEquals($res, $env);

        G::write_php_ini($pathIni, $start);
        $res = parse_ini_file($pathIni);
        $this->assertEquals($res, $start);        
    }

    /**
     * @covers G::verifyWriteAccess
     * @todo   Implement testVerifyWriteAccess().
     */
    public function testVerifyWriteAccess()
    {
        /*
        * @not testing function I static var static $script_time
        * try catch e       
        */ 
    }

    /**
     * @covers G::renderTemplate
     * @todo   Implement testRenderTemplate().
     */
    public function testRenderTemplate()
    {
        /*
        * @not testing function I static var static $script_time
        *        
        */ 
    }

    /**
     * @covers G::parseTemplate
     * @todo   Implement testParseTemplate().
     */
    public function testParseTemplate()
    {
        /*
        * @not testing function I static var static $script_time
        *        up
        */ 
    }

    /**
     * @covers G::update_php_ini
     * @todo   Implement testUpdate_php_ini().
     */
    public function testUpdate_php_ini()
    {
        $pathIni = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini';
        $correct = parse_ini_file($pathIni);
        $env = array( 'var1' => 'v1', 'var2' => 'v2');
        G::update_php_ini($pathIni, $env);
        $response = parse_ini_file($pathIni);
        $correct = array_merge($correct, $response);
        $this->assertTrue(isset($response['var1']));
        $this->assertEquals($correct, $response);
    }

    /**
     * @covers G::is_writable_r
     * @todo   Implement testIs_writable_r().
     */
    public function testIs_writable_r()
    {
        $pathIni = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP . 'testClassG.ini';
        $response = G::is_writable_r($pathIni);
        $this->assertTrue($response);

        $path = PATH_TRUNK . 'tests' . PATH_SEP . 'functional' . PATH_SEP . 'classGTest' . PATH_SEP ;
        $response = G::is_writable_r($path);
        $this->assertFalse($response);
    }
}